// Code generated by MockGen. DO NOT EDIT.
// Source: showcase/repository (interfaces: BookRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "showcase/model"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepo is a mock of BookRepo interface.
type MockBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoMockRecorder
}

// MockBookRepoMockRecorder is the mock recorder for MockBookRepo.
type MockBookRepoMockRecorder struct {
	mock *MockBookRepo
}

// NewMockBookRepo creates a new mock instance.
func NewMockBookRepo(ctrl *gomock.Controller) *MockBookRepo {
	mock := &MockBookRepo{ctrl: ctrl}
	mock.recorder = &MockBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepo) EXPECT() *MockBookRepoMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRepo) CreateBook(arg0 model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepoMockRecorder) CreateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepo)(nil).CreateBook), arg0)
}

// DeleteBookid mocks base method.
func (m *MockBookRepo) DeleteBookid(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookid indicates an expected call of DeleteBookid.
func (mr *MockBookRepoMockRecorder) DeleteBookid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookid", reflect.TypeOf((*MockBookRepo)(nil).DeleteBookid), arg0)
}

// GetAllBooks mocks base method.
func (m *MockBookRepo) GetAllBooks() ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks")
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookRepoMockRecorder) GetAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookRepo)(nil).GetAllBooks))
}

// GetBookbyID mocks base method.
func (m *MockBookRepo) GetBookbyID(arg0 int64) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookbyID", arg0)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookbyID indicates an expected call of GetBookbyID.
func (mr *MockBookRepoMockRecorder) GetBookbyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookbyID", reflect.TypeOf((*MockBookRepo)(nil).GetBookbyID), arg0)
}

// UpdateBookid mocks base method.
func (m *MockBookRepo) UpdateBookid(arg0 model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookid", arg0)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookid indicates an expected call of UpdateBookid.
func (mr *MockBookRepoMockRecorder) UpdateBookid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookid", reflect.TypeOf((*MockBookRepo)(nil).UpdateBookid), arg0)
}
